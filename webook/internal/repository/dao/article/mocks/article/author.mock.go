// Code generated by MockGen. DO NOT EDIT.
// Source: webook/internal/repository/dao/article/author.go
//
// Generated by this command:
//
//	mockgen -source=webook/internal/repository/dao/article/author.go -package=articledaomock -destination=webook/internal/repository/dao/article/mocks/article/author.mock.go
//

// Package articledaomock is a generated GoMock package.
package articledaomock

import (
	context "context"
	reflect "reflect"
	article "webookProgram/webook/internal/repository/dao/article"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthorDAO is a mock of AuthorDAO interface.
type MockAuthorDAO struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorDAOMockRecorder
	isgomock struct{}
}

// MockAuthorDAOMockRecorder is the mock recorder for MockAuthorDAO.
type MockAuthorDAOMockRecorder struct {
	mock *MockAuthorDAO
}

// NewMockAuthorDAO creates a new mock instance.
func NewMockAuthorDAO(ctrl *gomock.Controller) *MockAuthorDAO {
	mock := &MockAuthorDAO{ctrl: ctrl}
	mock.recorder = &MockAuthorDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorDAO) EXPECT() *MockAuthorDAOMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockAuthorDAO) Insert(ctx context.Context, art article.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockAuthorDAOMockRecorder) Insert(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAuthorDAO)(nil).Insert), ctx, art)
}

// Update mocks base method.
func (m *MockAuthorDAO) UpdateById(ctx context.Context, art article.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, art)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAuthorDAOMockRecorder) Update(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockAuthorDAO)(nil).UpdateById), ctx, art)
}
