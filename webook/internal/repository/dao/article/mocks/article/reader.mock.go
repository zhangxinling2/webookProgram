// Code generated by MockGen. DO NOT EDIT.
// Source: webook/internal/repository/dao/article/reader.go
//
// Generated by this command:
//
//	mockgen -source=webook/internal/repository/dao/article/reader.go -package=articledaomock -destination=webook/internal/repository/dao/article/mocks/article/reader.mock.go
//

// Package articledaomock is a generated GoMock package.
package articledaomock

import (
	context "context"
	reflect "reflect"
	article "webookProgram/webook/internal/repository/dao/article"

	gomock "go.uber.org/mock/gomock"
)

// MockReaderDAO is a mock of ReaderDAO interface.
type MockReaderDAO struct {
	ctrl     *gomock.Controller
	recorder *MockReaderDAOMockRecorder
	isgomock struct{}
}

// MockReaderDAOMockRecorder is the mock recorder for MockReaderDAO.
type MockReaderDAOMockRecorder struct {
	mock *MockReaderDAO
}

// NewMockReaderDAO creates a new mock instance.
func NewMockReaderDAO(ctrl *gomock.Controller) *MockReaderDAO {
	mock := &MockReaderDAO{ctrl: ctrl}
	mock.recorder = &MockReaderDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderDAO) EXPECT() *MockReaderDAOMockRecorder {
	return m.recorder
}

// UpsertArticle mocks base method.
func (m *MockReaderDAO) UpsertArticle(ctx context.Context, art article.Article) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertArticle", ctx, art)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertArticle indicates an expected call of UpsertArticle.
func (mr *MockReaderDAOMockRecorder) UpsertArticle(ctx, art any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertArticle", reflect.TypeOf((*MockReaderDAO)(nil).UpsertArticle), ctx, art)
}
